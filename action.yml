name: 'Android Kernel Build Action'
description: "A action to built android kernel."

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  kernel-url:
    description: 'https://github.com/hanyu13334/android_kernel_oppo_mtk4.19'
    required: true
  vendor-url:
    description: 'Kernel Vendor Source Url'
    required: false
  kernel-dir:
    required: false
    default: kernel
  vendor:
    required: false
    default: false
  vendor-dir:
    required: false
    default: vendor
  branch:
    description: 'Branch name'
    required: false
    default: main
  config:
    description: 'configuration for building android kernel'
    required: true
    default: defconfig
  arch:
    required: true
    default: arm64
  version:
    description: 'Android version.'
    required: true
    default: android12
  ksu:
    description: 'KernelSU function support'
    required: false
    default: false
  ksu-version:
    description: 'KernelSU default branch'
    required: false
    default: "main"
  overlayfs:
    description: 'Enable Overlayfs for ksu'
    required: false
    default: false
  disable-lto:
    description: 'Disable LTO configs for configs.'
    required: false
    default: false
  lxc:
    description: 'Enable lxc and docker configs for configs.'
    required: false
    default: false
  lxc-patch:
    description: 'Apply lxc patch aviod not booting'
    required: false
    default: false
  kvm: 
    description: 'Enable KVM for configs.'
    required: false
    default: false
  ccache:
    description: 'Enable Ccache for compiling kernel'
    required: false
    default: false
  aosp-gcc:
    description: 'Use gcc from aosp project.'
    required: true
    default: true
  aosp-clang:
    description: 'Use clang from aosp project.'
    required: false
    default: false
  aosp-clang-version:
    required: false
    default: "r383902"
  python-27:
    description: 'Use python2.7 when build kernel.'
    required: false
    default: false
  anykernel3:
    description: 'Package kernel use anykernel3.'
    required: false
    default: false
  extra-cmd:
    description: 'Extra options of building kernel.'
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
    - id: cleanup
      uses: rokibhasansagar/slimhub_actions@main
      
    - name: install toolchain
      shell: bash
      run: sudo apt-get install binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3

    - name: download-aosp-gcc
      shell: bash
      if: inputs.aosp-gcc == 'true'
      run: |
        if [ ${{ inputs.aosp-clang }} = true ]; then
            mkdir -p -v $HOME/gcc-64
            wget -q -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
            mkdir -p -v $HOME/gcc-32
            wget -q -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
        else
            git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ --depth=1 -b android-msm-barbet-4.19-android12-qpr3 $HOME/gcc-64
            git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ --depth=1 -b android-msm-barbet-4.19-android12-qpr3 $HOME/gcc-32
        fi

    - name: use python 2.7
      if: inputs.python-27 == 'true'
      run: |
        sudo apt install -y -q python2.7 python2.7-minimal
        sudo rm /bin/python
        sudo ln -s /bin/python2.7 /bin/python
        sudo ln -s /bin/python2.7 /bin/python2
      shell: bash

    - name: download aosp clang
      if: inputs.aosp-clang == 'true'
      run: |
        mkdir $HOME/clang -p -v 
        wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ inputs.version }}-release/clang-${{ inputs.aosp-clang-version }}.tar.gz
        tar -C $HOME/clang -zxf clang-${{ inputs.aosp-clang-version }}.tar.gz
      shell: bash

    - name: pull kernel source from selected branch
      run: |
        git clone ${{ inputs.kernel-url }} -b "${{ inputs.branch }}" --depth=1 ${{ inputs.kernel-dir }}
      shell: bash

    - name: pull vendor source
      if: inputs.vendor == 'true'
      run: |
        git clone ${{ inputs.vendor-url }} --depth=1 ${{ inputs.vendor-dir }}
      shell: bash

    - name: Setup ccache 
      if: inputs.ccache == 'true' 
      uses: hendrikmuhs/ccache-action@v1.2 
      with: 
        key: build-kernel-${{ inputs.arch }}${{ inputs.config }} 
        max-size: 4G

    - name: Set swap space
      uses: pierotofy/set-swap-space@master 
      with: 
        swap-size-gb: 12
   
    - name: pull kernelsu
      if: inputs.ksu == 'true'
      run: |
        cd ${{ inputs.kernel-dir }}
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ inputs.ksu-version }}
      shell: bash

    - name: disable lto
      if: inputs.disable-lto == 'true'
      shell: bash
      run: |
        cd ${{ inputs.kernel-dir }}
        if grep -q "LTO" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
        then
             sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
             sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
             sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
             echo "CONFIG_LTO_NONE=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
        fi

    - name: enable overlayfs
      if: inputs.overlayfs == 'true'
      shell: bash
      run: |
        cd ${{ inputs.kernel-dir }}
        grep -q "OVERLAYFS" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_OVERLAY_FS=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
      
    - name: enable kvm
      if: inputs.kvm == 'true'
      shell: bash
      run: |
        cd ${{ inputs.kernel-dir }}
        echo "CONFIG_VIRTUALIZATION=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
        echo "CONFIG_KVM=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
        echo "CONFIG_KVM_MMIO=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
        echo "CONFIG_KVM_ARM_HOST=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}

    - name: enable lxc
      if: inputs.lxc == 'true'
      shell: bash
      run: |
         cd ${{ inputs.kernel-dir }}
         wget https://github.com/wu17481748/lxc-docker/raw/main/LXC-DOCKER-OPEN-CONFIG.sh
         bash LXC-DOCKER-OPEN-CONFIG.sh
         if [ ${{ inputs.lxc-patch }} = true ]; then
            wget https://github.com/wu17481748/lxc-docker/raw/main/lxc.patch
            git apply lxc.patch
         else
             rm -rf LXC-DOCKER-OPEN-CONFIG.sh
         fi

    - name: build kernel with clang
      if: inputs.aosp-clang == 'true'
      run: |
        cd ${{ inputs.kernel-dir }}
        mkdir -p -v out
        export CLANG_PATH=$HOME/clang
        export PATH=$CLANG_PATH/bin:$PATH
        make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.config }}
        if [ ${{ inputs.ccache }} = true ]; then
            export USE_CCACHE=1
            make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC="ccache clang" ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
        else
            make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
        fi
      shell: bash

    - name: build kernel with gcc
      if: inputs.aosp-clang == 'false'
      run: |
        cd ${{ inputs.kernel-dir }}
        mkdir -p -v out
        make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- ARCH=${{ inputs.arch }} O=out ${{ inputs.config }}
        make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }} 
      shell: bash

    - name: package with anykernel3
      if: inputs.anykernel3 == 'true'
      run: | 
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        
        rm -rf -v ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/Image

        if [ -f ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/Image.*-dtb ]; then
           cp ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/Image.*-dtb AnyKernel3 -rv
        else
           cp ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/Image.* AnyKernel3 -rv
        fi

        test -f ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/dtbo.img && cp ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/dtbo.img AnyKernel3/
        
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
      shell: bash

    - id: uploadi
      if: inputs.anykernel3 == 'false'
      uses: actions/upload-artifact@v3
      with:
        name: bare-compiled-kernel
        path: ${{ inputs.kernel-dir }}/out/arch/${{ inputs.arch }}/boot/Image.*

    - id: uploada
      if: inputs.anykernel3 == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: AnyKernel3-flasher
        path: AnyKernel3/*
      
post: 
  runs: 
    - name: post
      shell: bash
      run:  bash $GITHUB_ACTION_PATH/post.sh
